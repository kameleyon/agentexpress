// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  first_name String
  last_name  String
  avatar_url String?
  role       String   @default("user") // user, admin
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  agents        Agent[]
  user_agents   UserAgent[]
  subscriptions Subscription[]
  agent_logs    AgentLog[]

  @@map("users")
}

model Agent {
  id           String   @id @default(uuid())
  name         String
  description  String
  type         String
  capabilities Json
  is_public    Boolean  @default(false)
  creator_id   String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  creator     User        @relation(fields: [creator_id], references: [id])
  user_agents UserAgent[]
  agent_logs  AgentLog[]

  @@map("agents")
}

model UserAgent {
  id         String   @id @default(uuid())
  user_id    String
  agent_id   String
  settings   Json
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [user_id], references: [id])
  agent        Agent         @relation(fields: [agent_id], references: [id])
  integrations Integration[]

  @@map("user_agents")
}

model AgentLog {
  id        String   @id @default(uuid())
  agent_id  String
  user_id   String
  timestamp DateTime @default(now())
  input     String
  output    String
  metadata  Json?

  // Relations
  agent Agent @relation(fields: [agent_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])

  @@map("agent_logs")
}

model Subscription {
  id         String   @id @default(uuid())
  user_id    String
  plan_id    String
  status     String // active, canceled, expired
  start_date DateTime
  end_date   DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id])
  plan Plan @relation(fields: [plan_id], references: [id])

  @@map("subscriptions")
}

model Plan {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal
  features    Json
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("plans")
}

model Integration {
  id            String   @id @default(uuid())
  user_agent_id String
  type          String
  credentials   Json
  settings      Json
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  user_agent UserAgent @relation(fields: [user_agent_id], references: [id])

  @@map("integrations")
}
